import javax.naming.OperationNotSupportedException;
import java.util.Arrays;

/**
 * Make sure that the equal method consider
 * two QR codes as identical if they have been flipped
 * by 0,1,2 or 3 quarter rotations
 *
 * For instance the two following matrices should be
 * considered equals if you flip your head by 180 degrees
 *
 *         boolean [][] t0 = new boolean[][] {
 *                 {false,true,false,false},
 *                 {false,false,true,true},
 *                 {true,false,false,true},
 *                 {true,true,false,true}
 *         };
 *
 *         // t2 is a version of t2 with two quarter rotations
 *         boolean [][] t2 = new boolean[][] {
 *                 {true,false,true,true},
 *                 {true,false,false,true},
 *                 {true,true,false,false},
 *                 {false,false,true,false}
 *         };
 */
public class QRcode {

    protected boolean [][] data;

    /**
     * Create a QR code object
     * @param data is a n x n square matrix
     */
    public QRcode(boolean [][] data) {
        this.data = data;
    }

    /**
     * Return true if the other matrix is identical up to
     * 0, 1, 2 or 3 number of rotations
     * @param o the other matrix to compare to
     * @return
     */
    @Override
    public boolean equals(Object o) {
        QRcode one = (QRcode) o;
        int i = 0;
        while (i < 4){
            if (this.same(one)){
                return true;
            }
            one.data = swipe(one);
            i++;
        }
        return false;
    }

    public String toString() {
        return Arrays.deepToString(this.data);
    }

    public boolean same(QRcode obj){
        for (int i = 0; i < this.data.length;i++){
            for (int j = 0; j < this.data[i].length;j++){
                if (this.data[i][j] != obj.data[i][j]){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean[][] swipe(QRcode obj){
        int haut = obj.data[0].length;
        int larg = obj.data.length;
        boolean[][] new_ = new boolean[haut][larg];
        for (int i = 0; i < larg; i++){
            for (int j = 0; j < haut; j++) {
                new_[(haut-1) - j][i] = obj.data[i][j];
            }
        }
        return new_;
    }
}
